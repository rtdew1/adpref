library(ggplot2)
library(tidyverse)
library(xtable)
library(RColorBrewer)
library(tidyr)
results_dir <- "../results/binary_mpc_results/"
plots_dir <- "../code/plots/v7/"
setwd(results_dir)
studies <- c(
"analysis-7.0-knn1-binary-mpc-None",
"analysis-7.1.2-abernethy-binary-mpc-None",
"analysis-7.3-aggregated-fixed-binary-mpc-None",
"analysis-7.4-og-binary-mpc-None",
"analysis-7.8-gur_approx_sym-binary-mpc-update1-new_cand-None"
)
study_names <- c(
"NN",
"Adaptive Linear",
"MU-Agg",
"MU",
"KUR"
)
indiv_results <- list()
for (s in seq_along(studies)) {
name <- study_names[s]
res <- read.csv(paste(studies[s], "/individuals.csv", sep = ""))
res <- res[res$passed_redisplay == 1, ]
res$Model <- name
indiv_results[[name]] <- res
}
# Combine all the individual results into a single data frame
combined_indiv_res <- do.call(rbind, indiv_results)
setwd(plots_dir)
library(ggplot2)
library(tidyverse)
library(xtable)
library(RColorBrewer)
library(tidyr)
results_dir <- "../results/binary_mpc_results/"
plots_dir <- "../../code/plots/v7/"
setwd(results_dir)
setwd("~/Dropbox/1_proj/urbn/code/adpref_mnsc_code/results_and_analysis/analysis")
library(ggplot2)
library(tidyverse)
library(xtable)
library(RColorBrewer)
library(tidyr)
results_dir <- "../results/binary_mpc_results/"
plots_dir <- "../../code/plots/v7/"
setwd(results_dir)
studies <- c(
"analysis-7.0-knn1-binary-mpc-None",
"analysis-7.1.2-abernethy-binary-mpc-None",
"analysis-7.3-aggregated-fixed-binary-mpc-None",
"analysis-7.4-og-binary-mpc-None",
"analysis-7.8-gur_approx_sym-binary-mpc-update1-new_cand-None"
)
study_names <- c(
"NN",
"Adaptive Linear",
"MU-Agg",
"MU",
"KUR"
)
indiv_results <- list()
for (s in seq_along(studies)) {
name <- study_names[s]
res <- read.csv(paste(studies[s], "/individuals.csv", sep = ""))
res <- res[res$passed_redisplay == 1, ]
res$Model <- name
indiv_results[[name]] <- res
}
# Combine all the individual results into a single data frame
combined_indiv_res <- do.call(rbind, indiv_results)
setwd(plots_dir)
getwd()
setwd("../..")
getwd()
setwd("code")
library(ggplot2)
library(tidyverse)
library(xtable)
library(RColorBrewer)
library(tidyr)
results_dir <- "../results/binary_mpc_results/"
plots_dir <- "../../analysis/plots/v7/"
setwd(results_dir)
setwd("~/Dropbox/1_proj/urbn/code/adpref_mnsc_code/results_and_analysis/analysis")
library(ggplot2)
library(tidyverse)
library(xtable)
library(RColorBrewer)
library(tidyr)
results_dir <- "../results/binary_mpc_results/"
plots_dir <- "../../analysis/plots/v7/"
setwd(results_dir)
studies <- c(
"analysis-7.0-knn1-binary-mpc-None",
"analysis-7.1.2-abernethy-binary-mpc-None",
"analysis-7.3-aggregated-fixed-binary-mpc-None",
"analysis-7.4-og-binary-mpc-None",
"analysis-7.8-gur_approx_sym-binary-mpc-update1-new_cand-None"
)
study_names <- c(
"NN",
"Adaptive Linear",
"MU-Agg",
"MU",
"KUR"
)
indiv_results <- list()
for (s in seq_along(studies)) {
name <- study_names[s]
res <- read.csv(paste(studies[s], "/individuals.csv", sep = ""))
res <- res[res$passed_redisplay == 1, ]
res$Model <- name
indiv_results[[name]] <- res
}
# Combine all the individual results into a single data frame
combined_indiv_res <- do.call(rbind, indiv_results)
setwd(plots_dir)
## Compare individual-level accuracies by model ---------------------------------
# Choose models
models_to_compare <- c("NN", "Adaptive Linear", "MU-Agg")
# Compute min/max accuracies
min_acc <- min(combined_indiv_res[combined_indiv_res$Model %in% models_to_compare, ]$fixed_mpc_accuracy)
max_acc <- max(combined_indiv_res[combined_indiv_res$Model %in% models_to_compare, ]$fixed_mpc_accuracy)
# Create df for plotting
acc_plot_df <- data.frame()
for (name in models_to_compare) {
res <- indiv_results[[name]]
acc <- table(factor(res$fixed_mpc_accuracy, levels = seq(min_acc, max_acc, 0.1))) / nrow(res)
acc_plot_df <- rbind(
acc_plot_df,
data.frame(Model = name, Mean = acc)
)
}
colnames(acc_plot_df) <- c("Model", "Accuracy", "Proportion")
acc_plot_df$Model <- factor(acc_plot_df$Model, levels = c("NN", "Adaptive Linear", "MU-Agg"))
palette <- c("#003f5c", "#58508d", "#bc5090", "#ff6361", "#ffa600")
acc_by_model_columns <- ggplot(
acc_plot_df,
aes(x = Accuracy, y = Proportion, fill = Model)
) +
geom_col(position = "dodge") +
scale_x_discrete(labels = seq(min_acc, max_acc, by = 0.1), drop = FALSE) +
scale_fill_manual(values = palette[c(1, 3, 5)]) +
theme_bw()
# pdf(file = "acc_by_model_columns.pdf", width = 7, height = 3)
acc_by_model_columns
# dev.off()
library(ggplot2)
library(tidyverse)
library(xtable)
library(RColorBrewer)
library(tidyr)
results_dir <- "../results/mpc_results/"
plots_dir <- "../../analysis/plots/v6/"
setwd(results_dir)
library(ggplot2)
library(tidyverse)
library(xtable)
library(RColorBrewer)
library(tidyr)
results_dir <- "../results/mpc_results/"
plots_dir <- "../../analysis/plots/v6/"
setwd(results_dir)
setwd("~/Dropbox/1_proj/urbn/code/adpref_mnsc_code/results_and_analysis/analysis")
library(ggplot2)
library(tidyverse)
library(xtable)
library(RColorBrewer)
library(tidyr)
results_dir <- "../results/mpc_results/"
plots_dir <- "../../analysis/plots/v6/"
setwd(results_dir)
studies <- c(
"redone-6.2_knn1_no_renorm",
"analysis-6.8-mpc_fixed_og_new_priors-None",
"analysis-6.9-mpc_fixed_gur_sym-None"
)
study_names <- c(
"Nearest",
"MU",
"KUR"
)
indiv_results <- list()
for (s in seq_along(studies)) {
name <- study_names[s]
res <- read.csv(paste(studies[s], "/individuals.csv", sep = ""))
res <- res[res$passed_redisplay == 1, ]
res$Model <- name
indiv_results[[name]] <- res
}
# Combine all the individual results into a single data frame
combined_indiv_res <- do.call(rbind, indiv_results)
setwd(plots_dir)
# Useful functions
compare_densities <- function(ind_results, var, models, xlab, palette = NA) {
if (any(is.na(palette))) {
palette <- c("#003f5c", "#58508d", "#bc5090", "#ff6361", "#ffa600")
}
compare_densities <- ggplot(
ind_results[ind_results$Model %in% models, ],
aes(x = !!sym(var), fill = Model, linetype = Model)
) +
geom_density(alpha = 0.5) +
geom_vline(xintercept = 0.0, linetype = "dotted") +
scale_fill_manual(values = palette) +
labs(x = xlab, y = "Density") +
theme_bw()
return(compare_densities)
}
summarize_stat <- function(results_list, col_name, stat_name, stat_func, se_func) {
stat_df <- data.frame()
for (s in seq_along(results_list)) {
name <- names(results_list)[s]
res <- results_list[[s]]
stat_df <- rbind(
stat_df,
data.frame(
Model = name,
Stat = stat_name,
Value = stat_func(res[, col_name]),
SE = se_func(res[, col_name])
)
)
}
return(stat_df)
}
bernoulli_se <- function(x) sqrt(mean(x) * (1 - mean(x)) / length(x))
mean_se <- function(x) t.test(x)$stderr
## Plot the distribution of fixed_test_corr as a density for each model -----------
palette <- c("#003f5c", "#58508d", "#bc5090", "#ff6361", "#ffa600")
compare_corr_densities <- compare_densities(
ind_results = combined_indiv_res,
var = "fixed_test_corr",
models = study_names,
xlab = "Correlation",
palette = palette[c(1, 3, 5)]
)
compare_corr_densities
# pdf(file = "compare_corr_densities.pdf", width = 5, height = 3)
compare_corr_densities
# dev.off()
setwd("~/Dropbox/1_proj/urbn/code/adpref_mnsc_code/results_and_analysis/analysis")
library(ggplot2)
library(tidyverse)
library(xtable)
library(RColorBrewer)
library(tidyr)
results_dir <- "../results/ar_results/"
plots_dir <- "../../analysis/plots/v5/"
setwd(results_dir)
studies <- c(
"redone_41_knn1",
"analysis-5.0-og-ar-dresses10-None",
"analysis-5.1.2-aggregated-ar-dresses10-None",
"analysis-5.8-gur_w_old_priors-redo"
)
study_names <- c(
"Nearest",
"MU",
"MU-Agg",
"KUR"
)
indiv_results <- list()
for (s in seq_along(studies)) {
name <- study_names[s]
res <- read.csv(paste(studies[s], "/individuals.csv", sep = ""))
res <- res[res$passed_redisplay == 1, ]
res$Model <- name
indiv_results[[name]] <- res
}
# Combine all the individual results into a single data frame
combined_indiv_res <- do.call(rbind, indiv_results)
setwd(plots_dir)
# Useful functions
compare_densities <- function(ind_results, var, models, xlab, palette = NA) {
if (any(is.na(palette))) {
palette <- c("#003f5c", "#58508d", "#bc5090", "#ff6361", "#ffa600")
}
compare_densities <- ggplot(
ind_results[ind_results$Model %in% models, ],
aes(x = !!sym(var), fill = Model, linetype = Model)
) +
geom_density(alpha = 0.5) +
geom_vline(xintercept = 0.0, linetype = "dotted") +
scale_fill_manual(values = palette) +
labs(x = xlab, y = "Density") +
theme_bw()
return(compare_densities)
}
summarize_stat <- function(results_list, col_name, stat_name, stat_func, se_func) {
stat_df <- data.frame()
for (s in seq_along(results_list)) {
name <- names(results_list)[s]
res <- results_list[[s]]
stat_df <- rbind(
stat_df,
data.frame(
Model = name,
Stat = stat_name,
Value = stat_func(res[, col_name]),
SE = se_func(res[, col_name])
)
)
}
return(stat_df)
}
bernoulli_se <- function(x) sqrt(mean(x) * (1 - mean(x)) / length(x))
mean_se <- function(x) t.test(x)$stderr
## Plot the distribution of fixed_test_corr as a density for each model -----------
palette <- c("#003f5c", "#58508d", "#bc5090", "#ff6361", "#ffa600")
compare_corr_densities <- compare_densities(
ind_results = combined_indiv_res,
var = "fixed_test_corr",
models = c("Nearest", "MU-Agg"),
xlab = "Correlation",
palette = palette[c(1, 5)]
)
compare_corr_densities
# pdf(file = "compare_corr_densities.pdf", width = 5, height = 3)
compare_corr_densities
# dev.off()
palette <- c("#00429d", "#4771b2", "#73a2c6", "#a5d5d8", "#ffffe0")
compare_acfn_corr_densities <- compare_densities(
ind_results = combined_indiv_res,
var = "fixed_test_corr",
models = c("MU", "MU-Agg", "KUR"),
xlab = "Correlation",
palette = palette[c(1, 3, 5)]
)
compare_acfn_corr_densities
# pdf(file = "compare_acfn_corr_densities.pdf", width = 5, height = 3)
compare_acfn_corr_densities
# dev.off()
setwd("~/Dropbox/1_proj/urbn/code/adpref_mnsc_code/results_and_analysis/analysis")
# ChatGPT-4 assisted
# Required Libraries
library(ggplot2)
library(tidyr)
## MU-AGG, ADAPTIVE ----------------------------------------------
setwd("../results/7.x_different_reps/")
data <- read.csv("mu-agg_diff_reps_adaptive_items.csv")
data$Ratings <- 5:41
data <- data[, c("Original", "PCA.5", "VGG.PCA.10", "Ratings")]
# Convert data to long format for plotting
data_long <- pivot_longer(data, -Ratings, names_to = "Data", values_to = "Accuracy")
# Make line plot
palette <- c("#003f5c", "#58508d", "#bc5090", "#ff6361", "#ffa600")
diff_reps_adaptive_items_plot <- ggplot(
data_long,
aes(x = Ratings, y = Accuracy, color = Data, group = Data, linetype = Data)
) +
geom_line(alpha = 0.3) +
geom_smooth(se = FALSE, span = 0.8) +
scale_color_manual(values = palette[c(1, 3, 5)]) +
labs(
title = "Accuracy as a function of the number of ratings",
x = "Number of Ratings",
y = "Accuracy",
color = "Data"
) +
ylim(0.5, NA) +
theme_bw()
# Save plot
# setwd("~/Dropbox/1_proj/urbn/code/analysis/plots/v7/")
# pdf("mu_agg_diff_reps_adaptive_items.pdf", height = 4, width = 7)
diff_reps_adaptive_items_plot
# dev.off()
## MU-AGG, RANDOM --------------------------------------------
data <- read.csv("mu-agg_diff_reps_random_items.csv")
data$Ratings <- 5:41
data <- data[, c("Original", "PCA.5", "VGG.PCA.10", "Ratings")]
# Convert data to long format for plotting
data_long <- pivot_longer(data, -Ratings, names_to = "Data", values_to = "Accuracy")
# Make line plot
diff_reps_random_items_plot <- ggplot(data_long, aes(x = Ratings, y = Accuracy, color = Data, group = Data, linetype = Data)) +
geom_line(alpha = 0.3) +
geom_smooth(se = FALSE, span = 0.8) +
labs(
title = "Accuracy as a function of the number of ratings",
x = "Number of Ratings",
y = "Accuracy",
color = "Data"
) +
ylim(0.5, NA) +
theme_bw()
# Save plot
# setwd("~/Dropbox/1_proj/urbn/code/analysis/plots/v7/")
# pdf("mu_agg_diff_reps_random_items.pdf", height = 4, width = 7)
diff_reps_random_items_plot
# dev.off()
# MU, ADAPTIVE ----------------------------------------------
data <- read.csv("mu_diff_reps_adaptive_items.csv")
data$Ratings <- 5:41
# Convert data to long format for plotting
data_long <- pivot_longer(data, -Ratings, names_to = "Data", values_to = "Accuracy")
# Make line plot
diff_reps_adaptive_items_plot <- ggplot(data_long, aes(x = Ratings, y = Accuracy, color = Data, group = Data, linetype = Data)) +
geom_line(alpha = 0.3) +
geom_smooth(se = FALSE, span = 0.8) +
labs(
title = "Adaptive Items (MU), Individual-level Hyperparameters",
x = "Number of Ratings",
y = "Accuracy",
color = "Data"
) +
ylim(0.5, NA) +
theme_bw()
# Save plot
# setwd("~/Dropbox/1_proj/urbn/code/analysis/plots/v7/")
# pdf("mu_diff_reps_adaptive_items.pdf", height = 4, width = 7)
diff_reps_adaptive_items_plot
# dev.off()
adaptive_data = data_long
adaptive_data$Selection = "Adaptive (MU)"
# MU, RANDOM --------------------------------------------
data <- read.csv("mu_diff_reps_random_items.csv")
data$Ratings <- 5:41
# Convert data to long format for plotting
data_long <- pivot_longer(data, -Ratings, names_to = "Data", values_to = "Accuracy")
# Make line plot
diff_reps_random_items_plot <- ggplot(data_long, aes(x = Ratings, y = Accuracy, color = Data, group = Data, linetype = Data)) +
geom_line(alpha = 0.3) +
geom_smooth(se = FALSE, span = 0.8) +
labs(
title = "Individual-level Hyperparameters, Random Items",
x = "Number of Ratings",
y = "Accuracy",
color = "Data"
) +
ylim(0.5, NA) +
theme_bw()
# Save plot
# setwd("~/Dropbox/1_proj/urbn/code/analysis/plots/v7/")
# pdf("mu_diff_reps_random_items.pdf", height = 4, width = 7)
diff_reps_random_items_plot
# dev.off()
random_data = data_long
random_data$Selection = "Random"
combined = rbind(adaptive_data, random_data)
combined = combined[combined$Selection == "Adaptive (MU)",]
palette <- c("#003f5c", "#58508d", "#bc5090", "#ff6361", "#ffa600")
faceted_comparison = ggplot(combined, aes(x = Ratings, y = Accuracy, color = Data, group = Data, linetype = Data)) +
geom_line(alpha = 0.3) +
geom_smooth(se = FALSE, span = 0.8) +
labs(
x = "Number of Ratings",
y = "Accuracy",
color = "Data"
) +
scale_color_manual(values = palette) +
ylim(0.5, NA) +
#facet_wrap(~Selection) +
theme_bw()
# pdf("faceted_comparison_diff_reps.pdf", height = 3, width = 5.5)
faceted_comparison
# dev.off()
setwd("~/Dropbox/1_proj/urbn/code/adpref_mnsc_code/results_and_analysis/analysis")
library(ggplot2)
library(tidyverse)
library(RColorBrewer)
# Load data
results_dir <- "../results/"
plots_dir <- "../../plots/v7/"
setwd(results_dir)
studies <- c(
"7.x_benefits_of_adaptivity/mu-agg_on_knn/mu-agg_on_knn-individual_acc_df.csv",
"7.x_n_ratings_offline_testing/mu-agg-individual_acc_df.csv",
"7.x_n_ratings_offline_testing/knn-individual_acc_df.csv"
)
study_names <- c(
"GP-Agg Random",
"GP-Agg Adaptive",
"Nearest Neighbor Random"
)
indiv_results <- list()
for (s in seq_along(studies)) {
name <- study_names[s]
res <- read.csv(studies[s])
res$Model <- name
indiv_results[[name]] <- res
}
avg_acc_by_ratings <- do.call(
rbind,
lapply(
indiv_results,
function(x) colMeans(select(x, -Model, -user_id))
)
)
colnames(avg_acc_by_ratings) <- gsub("X", "", colnames(avg_acc_by_ratings))
# Convert avg_acc_by_ratings to long format
avg_acc_by_ratings_long <- as.data.frame(avg_acc_by_ratings) %>%
rownames_to_column(var = "Model") %>%
pivot_longer(cols = -Model, names_to = "Ratings", values_to = "Accuracy")
palette <- c("#003f5c", "#58508d", "#bc5090", "#ff6361", "#ffa600")
acc_by_n_ratings_lines <- ggplot(
avg_acc_by_ratings_long,
aes(x = as.numeric(Ratings), y = Accuracy, color = Model, linetype = Model)
) +
geom_line(alpha = 0.3) +
geom_smooth(se = FALSE, span = 0.8) +
scale_color_manual(values = palette[c(1, 3, 5)]) +
theme_bw() +
labs(title = "", x = "Ratings", y = "Accuracy")
acc_by_n_ratings_lines
# setwd(plots_dir)
# pdf("~/Dropbox/Apps/Overleaf/Adaptive Preference Measurement - Working Paper/fig/benefits_from_adaptivity.pdf", height = 3, width = 5.5)
acc_by_n_ratings_lines
# dev.off()
